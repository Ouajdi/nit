# This file is part of NIT (http://www.nitlanguage.org).
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This file is generated by TODO, it should not be modified.
module binary_generated

intrude import standard::file
intrude import binary_base

in "C Header" `{
	#include <stdio.h>
	#include <inttypes.h>
`}

redef class BinaryWriter

	# Write a `Float` as a `float`
	#
	# Using this format may result in a loss of precision as it uses less bits than Nit `Float`.
	fun write_float(value: Float)
	do
		var native = file
		assert native != null
		native.write_float(value)
	end

	# Write a `Float` as a `double`
	fun write_double(value: Float)
	do
		var native = file
		assert native != null
		native.write_double(value)
	end

	# Write a `Bool` as a `char`
	fun write_bool(value: Bool)
	do
		var native = file
		assert native != null
		native.write_bool(value)
	end

	# Write a `Char` as a `unsigned char`
	fun write_char(value: Char)
	do
		var native = file
		assert native != null
		native.write_char(value)
	end

	# Write a `Int` as a `int8_t`
	#
	# Using this format may result in a loss of data as it has a smaller size than Nit `Int`.
	fun write_int8(value: Int)
	do
		var native = file
		assert native != null
		native.write_int8(value)
	end

	# Write a `Int` as a `uint8_t`
	#
	# Using this format may result in a loss of data as it has a smaller size than Nit `Int`.
	fun write_uint8(value: Int)
	do
		var native = file
		assert native != null
		native.write_uint8(value)
	end

	# Write a `Int` as a `int16_t`
	#
	# Using this format may result in a loss of data as it has a smaller size than Nit `Int`.
	fun write_int16(value: Int)
	do
		var native = file
		assert native != null
		native.write_int16(value)
	end

	# Write a `Int` as a `uint16_t`
	#
	# Using this format may result in a loss of data as it has a smaller size than Nit `Int`.
	fun write_uint16(value: Int)
	do
		var native = file
		assert native != null
		native.write_uint16(value)
	end

	# Write a `Int` as a `int32_t`
	#
	# Using this format may result in a loss of data as it may have a smaller size than Nit `Int`.
	fun write_int32(value: Int)
	do
		var native = file
		assert native != null
		native.write_int32(value)
	end

	# Write a `Int` as a `uint32_t`
	#
	# Using this format may result in a loss of data as it may have a smaller size than Nit `Int`.
	fun write_uint32(value: Int)
	do
		var native = file
		assert native != null
		native.write_uint32(value)
	end

	# Write a `Int` as a `int64_t`
	#
	# Using this format may result in a loss of data as it may have a smaller size than Nit `Int`.
	fun write_int64(value: Int)
	do
		var native = file
		assert native != null
		native.write_int64(value)
	end

	# Write a `Int` as a `uint64_t`
	#
	# Using this format may result in a loss of data as it may have a smaller size than Nit `Int`.
	fun write_uint64(value: Int)
	do
		var native = file
		assert native != null
		native.write_uint64(value)
	end

end

redef class BinaryReader

	# Read a float and return as a Float
	#
	# Using this format may result in a loss of precision as it uses less bits than Nit `Float`.
	fun read_float: Float
	do
		var native = file
		assert native != null
		assert not native.eof

		return native.read_float
	end

	# Read a double and return as a Float
	fun read_double: Float
	do
		var native = file
		assert native != null
		assert not native.eof

		return native.read_double
	end

	# Read a bool and return as a Bool
	fun read_bool: Bool
	do
		var native = file
		assert native != null
		assert not native.eof

		return native.read_bool
	end

	# Read a char and return as a Char
	fun read_char: Char
	do
		var native = file
		assert native != null
		assert not native.eof

		return native.read_char
	end

	# Read a int8 and return as a Int
	#
	# Using this format may result in a loss of data as it has a smaller size than Nit `Int`.
	fun read_int8: Int
	do
		var native = file
		assert native != null
		assert not native.eof

		return native.read_int8
	end

	# Read a uint8 and return as a Int
	#
	# Using this format may result in a loss of data as it has a smaller size than Nit `Int`.
	fun read_uint8: Int
	do
		var native = file
		assert native != null
		assert not native.eof

		return native.read_uint8
	end

	# Read a int16 and return as a Int
	#
	# Using this format may result in a loss of data as it has a smaller size than Nit `Int`.
	fun read_int16: Int
	do
		var native = file
		assert native != null
		assert not native.eof

		return native.read_int16
	end

	# Read a uint16 and return as a Int
	#
	# Using this format may result in a loss of data as it has a smaller size than Nit `Int`.
	fun read_uint16: Int
	do
		var native = file
		assert native != null
		assert not native.eof

		return native.read_uint16
	end

	# Read a int32 and return as a Int
	#
	# Using this format may result in a loss of data as it may have a smaller size than Nit `Int`.
	fun read_int32: Int
	do
		var native = file
		assert native != null
		assert not native.eof

		return native.read_int32
	end

	# Read a uint32 and return as a Int
	#
	# Using this format may result in a loss of data as it may have a smaller size than Nit `Int`.
	fun read_uint32: Int
	do
		var native = file
		assert native != null
		assert not native.eof

		return native.read_uint32
	end

	# Read a int64 and return as a Int
	#
	# Using this format may result in a loss of data as it may have a smaller size than Nit `Int`.
	fun read_int64: Int
	do
		var native = file
		assert native != null
		assert not native.eof

		return native.read_int64
	end

	# Read a uint64 and return as a Int
	#
	# Using this format may result in a loss of data as it may have a smaller size than Nit `Int`.
	fun read_uint64: Int
	do
		var native = file
		assert native != null
		assert not native.eof

		return native.read_uint64
	end

end

redef extern class NativeFile

	fun write_float(value: Float) `{
		float cvalue = value;
		fwrite(&cvalue, sizeof(float), 1, recv);
	`}

	fun write_double(value: Float) `{
		double cvalue = value;
		fwrite(&cvalue, sizeof(double), 1, recv);
	`}

	fun write_bool(value: Bool) `{
		char cvalue = value;
		fwrite(&cvalue, sizeof(char), 1, recv);
	`}

	fun write_char(value: Char) `{
		unsigned char cvalue = value;
		fwrite(&cvalue, sizeof(unsigned char), 1, recv);
	`}

	fun write_int8(value: Int) `{
		int8_t cvalue = value;
		fwrite(&cvalue, sizeof(int8_t), 1, recv);
	`}

	fun write_uint8(value: Int) `{
		uint8_t cvalue = value;
		fwrite(&cvalue, sizeof(uint8_t), 1, recv);
	`}

	fun write_int16(value: Int) `{
		int16_t cvalue = value;
		fwrite(&cvalue, sizeof(int16_t), 1, recv);
	`}

	fun write_uint16(value: Int) `{
		uint16_t cvalue = value;
		fwrite(&cvalue, sizeof(uint16_t), 1, recv);
	`}

	fun write_int32(value: Int) `{
		int32_t cvalue = value;
		fwrite(&cvalue, sizeof(int32_t), 1, recv);
	`}

	fun write_uint32(value: Int) `{
		uint32_t cvalue = value;
		fwrite(&cvalue, sizeof(uint32_t), 1, recv);
	`}

	fun write_int64(value: Int) `{
		int64_t cvalue = value;
		fwrite(&cvalue, sizeof(int64_t), 1, recv);
	`}

	fun write_uint64(value: Int) `{
		uint64_t cvalue = value;
		fwrite(&cvalue, sizeof(uint64_t), 1, recv);
	`}

	fun read_float: Float `{
		float value;
		fread(&value, sizeof(float), 1, recv);
		return value;
	`}

	fun read_double: Float `{
		double value;
		fread(&value, sizeof(double), 1, recv);
		return value;
	`}

	fun read_bool: Bool `{
		char value;
		fread(&value, sizeof(char), 1, recv);
		return value;
	`}

	fun read_char: Char `{
		unsigned char value;
		fread(&value, sizeof(unsigned char), 1, recv);
		return value;
	`}

	fun read_int8: Int `{
		int8_t value;
		fread(&value, sizeof(int8_t), 1, recv);
		return value;
	`}

	fun read_uint8: Int `{
		uint8_t value;
		fread(&value, sizeof(uint8_t), 1, recv);
		return value;
	`}

	fun read_int16: Int `{
		int16_t value;
		fread(&value, sizeof(int16_t), 1, recv);
		return value;
	`}

	fun read_uint16: Int `{
		uint16_t value;
		fread(&value, sizeof(uint16_t), 1, recv);
		return value;
	`}

	fun read_int32: Int `{
		int32_t value;
		fread(&value, sizeof(int32_t), 1, recv);
		return value;
	`}

	fun read_uint32: Int `{
		uint32_t value;
		fread(&value, sizeof(uint32_t), 1, recv);
		return value;
	`}

	fun read_int64: Int `{
		int64_t value;
		fread(&value, sizeof(int64_t), 1, recv);
		return value;
	`}

	fun read_uint64: Int `{
		uint64_t value;
		fread(&value, sizeof(uint64_t), 1, recv);
		return value;
	`}

end

