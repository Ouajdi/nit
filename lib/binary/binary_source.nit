# This file is part of NIT (http://www.nitlanguage.org).
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

private class DataType
	var nit_short_name: String
	var nit_type: String
	var c_type: String
	var extra_doc: nullable String
end

var data_types = [
	new DataType("float", "Float", "float",
		"Using this format may result in a loss of precision as it uses less bits than Nit `Float`."),
	new DataType("double", "Float", "double", null),

	new DataType("bool", "Bool", "char", null),
	new DataType("char", "Char", "unsigned char", null),

	#new DataType("int", "Int", "long"), # Dangerous

	new DataType("int8", "Int", "int8_t",
		"Using this format may result in a loss of data as it has a smaller size than Nit `Int`."),
	new DataType("uint8", "Int", "uint8_t",
		"Using this format may result in a loss of data as it has a smaller size than Nit `Int`."),
	new DataType("int16", "Int", "int16_t",
		"Using this format may result in a loss of data as it has a smaller size than Nit `Int`."),
	new DataType("uint16", "Int", "uint16_t",
		"Using this format may result in a loss of data as it has a smaller size than Nit `Int`."),
	new DataType("int32", "Int", "int32_t",
		"Using this format may result in a loss of data as it may have a smaller size than Nit `Int`."),
	new DataType("uint32", "Int", "uint32_t",
		"Using this format may result in a loss of data as it may have a smaller size than Nit `Int`."),
	new DataType("int64", "Int", "int64_t",
		"Using this format may result in a loss of data as it may have a smaller size than Nit `Int`."),
	new DataType("uint64", "Int", "uint64_t",
		"Using this format may result in a loss of data as it may have a smaller size than Nit `Int`.")
	]

print """
# This file is part of NIT (http://www.nitlanguage.org).
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This file is generated by TODO, it should not be modified.
module binary_generated

intrude import standard::file
intrude import binary_base

in "C Header" `{
	#include <stdio.h>
	#include <inttypes.h>
`}

redef class BinaryWriter
"""

for dt in data_types do
	print """
	# Write a `{{{dt.nit_type}}}` as a `{{{dt.c_type}}}`"""

	var extra_doc = dt.extra_doc
	if extra_doc != null then print """
	#
	# {{{extra_doc}}}"""

	print """
	fun write_{{{dt.nit_short_name}}}(value: {{{dt.nit_type}}})
	do
		var native = file
		assert native != null
		native.write_{{{dt.nit_short_name}}}(value)
	end
"""
end

print """
end

redef class BinaryReader
"""

for dt in data_types do
	print """
	# Read a {{{dt.nit_short_name}}} and return as a {{{dt.nit_type}}}"""

	var extra_doc = dt.extra_doc
	if extra_doc != null then print """
	#
	# {{{extra_doc}}}"""

	print """
	fun read_{{{dt.nit_short_name}}}: {{{dt.nit_type}}}
	do
		var native = file
		assert native != null
		assert not native.eof

		return native.read_{{{dt.nit_short_name}}}
	end
"""
end

print """
end

redef extern class NativeFile
"""

for dt in data_types do print """
	fun write_{{{dt.nit_short_name}}}(value: {{{dt.nit_type}}}) `{
		{{{dt.c_type}}} cvalue = value;
		fwrite(&cvalue, sizeof({{{dt.c_type}}}), 1, recv);
	`}
"""

for dt in data_types do print """
	fun read_{{{dt.nit_short_name}}}: {{{dt.nit_type}}} `{
		{{{dt.c_type}}} value;
		int r = fread(&value, sizeof({{{dt.c_type}}}), 1, recv);
		return value;
	`}
"""

print """
end
"""
